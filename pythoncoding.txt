
Краткое руководство по Python
1. Основы синтаксиса
Переменные и типы данных
python

# Объявление переменных
x = 10         # Целое число
y = 3.14       # Число с плавающей запятой
name = "John"  # Строка
is_active = True  # Логический тип

# Типы данных
print(type(x))  # <class 'int'>
print(type(y))  # <class 'float'>
print(type(name))  # <class 'str'>
print(type(is_active))  # <class 'bool'>
2. Управляющие конструкции
Условия
python

if x > 5:
    print("x больше 5")
elif x == 5:
    print("x равен 5")
else:
    print("x меньше 5")
Циклы
python

# Цикл for
for i in range(5):
    print(i)  # 0, 1, 2, 3, 4

# Цикл while
count = 0
while count < 5:
    print(count)  # 0, 1, 2, 3, 4
    count += 1
3. Функции
python

# Определение функции
def greet(name):
    return f"Hello, {name}!"

# Вызов функции
print(greet("Alice"))  # Hello, Alice!
4. Коллекции
Списки
python

# Создание списка
numbers = [1, 2, 3, 4, 5]

# Операции со списками
print(numbers[0])  # 1
numbers.append(6)  # Добавить элемент
print(numbers)  # [1, 2, 3, 4, 5, 6]
Словари
python

# Создание словаря
person = {
    "name": "John",
    "age": 30
}

# Операции со словарями
print(person["name"])  # John
person["age"] = 31  # Изменить значение
print(person)  # {'name': 'John', 'age': 31}
5. Обработка ошибок
python

try:
    result = 10 / 0
except ZeroDivisionError:
    print("Деление на ноль!")
finally:
    print("Завершение блока try-except")
6. Работа с файлами
python

# Чтение из файла
with open("example.txt", "r") as file:
    content = file.read()
    print(content)

# Запись в файл
with open("example.txt", "w") as file:
    file.write("Hello, World!")
7. Объектно-ориентированное программирование (ООП)
python

# Определение класса
class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def bark(self):
        return "Woof!"

# Создание объекта
my_dog = Dog("Buddy", 3)
print(my_dog.name)  # Buddy
print(my_dog.bark())  # Woof!
8. Модули и пакеты
python

# Импорт модуля
import math

# Использование функций модуля
print(math.sqrt(16))  # 4.0

# Импорт отдельной функции из модуля
from math import pi
print(pi)  # 3.141592653589793
9. Продвинутые темы
Генераторы списков
python

# Создание списка квадратов чисел
squares = [x**2 for x in range(10)]
print(squares)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
Анонимные функции (lambda)
python

# Определение и использование lambda-функции
add = lambda a, b: a + b
print(add(2, 3))  # 5
Декораторы
python

# Определение декоратора
def my_decorator(func):
    def wrapper():
        print("Что-то происходит до функции")
        func()
        print("Что-то происходит после функции")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()
# Что-то происходит до функции
# Hello!
# Что-то происходит после функции



Продвинутые темы Python
1. Сетевые запросы
Использование библиотеки requests
python

import requests

# GET-запрос
response = requests.get("https://api.github.com")
print(response.status_code)  # 200
print(response.json())  # Ответ в формате JSON

# POST-запрос
data = {"key": "value"}
response = requests.post("https://httpbin.org/post", json=data)
print(response.json())
2. Работа с ОС
Использование модуля os
python

import os

# Получение текущей рабочей директории
cwd = os.getcwd()
print(cwd)  # Текущая рабочая директория

# Изменение директории
os.chdir('/path/to/directory')

# Запуск команды в оболочке
os.system('ls -la')

# Работа с файлами и директориями
if not os.path.exists('new_dir'):
    os.makedirs('new_dir')  # Создание новой директории
os.rename('old_name.txt', 'new_name.txt')  # Переименование файла
os.remove('new_name.txt')  # Удаление файла
3. Парсинг
Использование библиотеки BeautifulSoup
python

from bs4 import BeautifulSoup
import requests

# Получение HTML-кода страницы
response = requests.get("https://www.example.com")
soup = BeautifulSoup(response.text, 'html.parser')

# Извлечение данных
title = soup.title.text
print(title)  # Заголовок страницы

# Извлечение всех ссылок
links = [a['href'] for a in soup.find_all('a', href=True)]
print(links)
4. Алгоритмы
Сортировка (быстрая сортировка)
python

def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

arr = [3, 6, 8, 10, 1, 2, 1]
print(quicksort(arr))  # [1, 1, 2, 3, 6, 8, 10]
Поиск (бинарный поиск)
python

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
target = 5
print(binary_search(arr, target))  # 4 (индекс элемента 5)
5. Искусственный интеллект
Работа с библиотекой TensorFlow
python

import tensorflow as tf

# Создание модели
model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10)
])

# Компиляция модели
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Создание данных
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

# Обучение модели
model.fit(x_train, y_train, epochs=5)

# Оценка модели
model.evaluate(x_test, y_test, verbose=2)
Работа с библиотекой scikit-learn
python

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Загрузка данных
iris = load_iris()
X, y = iris.data, iris.target

# Разделение данных на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Создание и обучение модели
clf = RandomForestClassifier(n_estimators=100)
clf.fit(X_train, y_train)

# Предсказание
y_pred = clf.predict(X_test)

# Оценка модели
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")  # Точность модели

Для полного освоения Python и его возможностей можно рассмотреть еще несколько важных тем. Вот некоторые из них:

1. Асинхронное программирование
Использование asyncio
python

import asyncio

async def say_hello():
    print("Hello")
    await asyncio.sleep(1)
    print("World")

asyncio.run(say_hello())
Работа с aiohttp
python

import aiohttp
import asyncio

async def fetch(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.text()

url = "https://www.example.com"
content = asyncio.run(fetch(url))
print(content)
2. Многопоточность и многопроцессорность
Многопоточность с threading
python

import threading

def print_numbers():
    for i in range(5):
        print(i)

thread = threading.Thread(target=print_numbers)
thread.start()
thread.join()
Многопроцессорность с multiprocessing
python

from multiprocessing import Process

def print_numbers():
    for i in range(5):
        print(i)

process = Process(target=print_numbers)
process.start()
process.join()
3. Работа с базами данных
Использование sqlite3
python

import sqlite3

# Создание базы данных и таблицы
conn = sqlite3.connect('example.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)''')
conn.commit()

# Вставка данных
cursor.execute("INSERT INTO users (name) VALUES ('Alice')")
conn.commit()

# Получение данных
cursor.execute("SELECT * FROM users")
rows = cursor.fetchall()
print(rows)  # [(1, 'Alice')]
conn.close()
Использование SQLAlchemy
python

from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

Base = declarative_base()
engine = create_engine('sqlite:///example.db')

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)

Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

# Добавление нового пользователя
new_user = User(name='Bob')
session.add(new_user)
session.commit()

# Получение данных
users = session.query(User).all()
for user in users:
    print(user.id, user.name)
4. Обработка данных
Использование pandas
python

import pandas as pd

# Создание DataFrame
data = {'Name': ['Alice', 'Bob', 'Charlie'],
        'Age': [25, 30, 35]}
df = pd.DataFrame(data)
print(df)

# Чтение из CSV
df = pd.read_csv('data.csv')

# Основные операции
print(df.describe())  # Статистика по данным
print(df.head())  # Первые 5 строк
5. Визуализация данных
Использование matplotlib
python

import matplotlib.pyplot as plt

# Простая линия
x = [1, 2, 3, 4]
y = [10, 20, 25, 30]
plt.plot(x, y)
plt.xlabel('x axis')
plt.ylabel('y axis')
plt.title('Simple Plot')
plt.show()
Использование seaborn
python

import seaborn as sns
import pandas as pd

# Создание DataFrame
data = {'Name': ['Alice', 'Bob', 'Charlie'],
        'Age': [25, 30, 35]}
df = pd.DataFrame(data)

# Построение графика
sns.barplot(x='Name', y='Age', data=df)
plt.show()
6. Тестирование
Использование unittest
python

import unittest

def add(a, b):
    return a + b

class TestMathFunctions(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add(2, 3), 5)

if __name__ == '__main__':
    unittest.main()
Использование pytest
python

# test_math.py
def add(a, b):
    return a + b

def test_add():
    assert add(2, 3) == 5

# Запуск теста командой
# pytest test_math.py
7. Создание и использование API
Использование Flask
python

from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route('/hello', methods=['GET'])
def hello():
    return jsonify(message="Hello, World!")

@app.route('/add', methods=['POST'])
def add():
    data = request.get_json()
    result = data['a'] + data['b']
    return jsonify(result=result)

if __name__ == '__main__':
    app.run(debug=True)
8. Обработка изображений
Использование Pillow
python

from PIL import Image

# Открытие изображения
img = Image.open('example.jpg')

# Применение фильтра и сохранение
img = img.convert("L")  # Конвертация в градации серого
img.save('example_gray.jpg')
9. Микросервисы
Использование FastAPI
python

from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}

@app.get("/items/{item_id}")
def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}

# Запуск сервера командой
# uvicorn main:app --reload
10. Управление проектами
Использование virtualenv и pip
bash

# Создание виртуального окружения
python -m venv myenv

# Активация виртуального окружения
# Windows
myenv\Scripts\activate
# macOS/Linux
source myenv/bin/activate

# Установка зависимостей
pip install requests

# Заморозка зависимостей
pip freeze > requirements.txt

# Установка зависимостей из файла
pip install -r requirements.txt
11. Интеграция с другими языками
Использование Cython
python

# Пример файла my_module.pyx
def say_hello():
    print("Hello from Cython!")

# Компиляция
# Создайте setup.py
from setuptools import setup
from Cython.Build import cythonize

setup(
    ext_modules = cythonize("my_module.pyx")
)

# Компиляция и установка
# python setup.py build_ext --inplace

# Использование в Python
import my_module
my_module.say_hello()